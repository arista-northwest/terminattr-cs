// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: openconfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Openconfig {

  /// <summary>Holder for reflection information generated from openconfig.proto</summary>
  public static partial class OpenconfigReflection {

    #region Descriptor
    /// <summary>File descriptor for openconfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OpenconfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBvcGVuY29uZmlnLnByb3RvEgpvcGVuY29uZmlnGglhbnkucHJvdG8imAEK",
            "DE5vdGlmaWNhdGlvbhIRCgl0aW1lc3RhbXAYASABKAMSIAoGcHJlZml4GAIg",
            "ASgLMhAub3BlbmNvbmZpZy5QYXRoEg0KBWFsaWFzGAMgASgJEiIKBnVwZGF0",
            "ZRgEIAMoCzISLm9wZW5jb25maWcuVXBkYXRlEiAKBmRlbGV0ZRgFIAMoCzIQ",
            "Lm9wZW5jb25maWcuUGF0aCJKCgZVcGRhdGUSHgoEcGF0aBgBIAEoCzIQLm9w",
            "ZW5jb25maWcuUGF0aBIgCgV2YWx1ZRgCIAEoCzIRLm9wZW5jb25maWcuVmFs",
            "dWUiFwoEUGF0aBIPCgdlbGVtZW50GAEgAygJIkQKBVZhbHVlEg0KBXZhbHVl",
            "GAEgASgMEh4KBHR5cGUYAiABKA4yEC5vcGVuY29uZmlnLlR5cGUSDAoEbmFt",
            "ZRgDIAEoCSKTAQoQR2V0TW9kZWxzUmVxdWVzdBI3CgxyZXF1ZXN0X3R5cGUY",
            "ASABKA4yIS5vcGVuY29uZmlnLkdldE1vZGVsc1JlcXVlc3QuVHlwZRIlCgVx",
            "dWVyeRgCIAEoCzIWLm9wZW5jb25maWcuTW9kZWxRdWVyeSIfCgRUeXBlEgsK",
            "B1NVTU1BUlkQABIKCgZERVRBSUwQASI+CgpNb2RlbFF1ZXJ5EgwKBG5hbWUY",
            "ASABKAkSEQoJbmFtZXNwYWNlGAIgASgJEg8KB3ZlcnNpb24YAyABKAkiOgoR",
            "R2V0TW9kZWxzUmVzcG9uc2USJQoGbW9kZWxzGAEgAygLMhUub3BlbmNvbmZp",
            "Zy5Nb2RlbERhdGEivAEKCU1vZGVsRGF0YRIMCgRuYW1lGAEgASgJEhEKCW5h",
            "bWVzcGFjZRgCIAEoCRIPCgd2ZXJzaW9uGAMgASgJEgwKBGRhdGEYBCABKAwS",
            "LgoKbW9kZWxfdHlwZRgFIAEoDjIaLm9wZW5jb25maWcuTW9kZWxEYXRhLlR5",
            "cGUiPwoEVHlwZRIKCgZNT0RVTEUQABIKCgZCVU5ETEUQARIQCgxBVUdNRU5U",
            "QVRJT04QAxINCglERVZJQVRJT04QBCLKAQoKR2V0UmVxdWVzdBIgCgZwcmVm",
            "aXgYASABKAsyEC5vcGVuY29uZmlnLlBhdGgSHgoEcGF0aBgCIAMoCzIQLm9w",
            "ZW5jb25maWcuUGF0aBIpCgR0eXBlGAMgASgOMhsub3BlbmNvbmZpZy5HZXRS",
            "ZXF1ZXN0LlR5cGUSFgoOY2FjaGVfaW50ZXJ2YWwYBCABKAMiNwoEVHlwZRIH",
            "CgNBTEwQABIKCgZDT05GSUcQARIJCgVTVEFURRACEg8KC09QRVJBVElPTkFM",
            "EAMiPQoLR2V0UmVzcG9uc2USLgoMbm90aWZpY2F0aW9uGAEgAygLMhgub3Bl",
            "bmNvbmZpZy5Ob3RpZmljYXRpb24imQEKClNldFJlcXVlc3QSIAoGcHJlZml4",
            "GAEgASgLMhAub3BlbmNvbmZpZy5QYXRoEiAKBmRlbGV0ZRgCIAMoCzIQLm9w",
            "ZW5jb25maWcuUGF0aBIjCgdyZXBsYWNlGAMgAygLMhIub3BlbmNvbmZpZy5V",
            "cGRhdGUSIgoGdXBkYXRlGAQgAygLMhIub3BlbmNvbmZpZy5VcGRhdGUiXQoL",
            "U2V0UmVzcG9uc2USIAoGcHJlZml4GAEgASgLMhAub3BlbmNvbmZpZy5QYXRo",
            "EiwKCHJlc3BvbnNlGAIgAygLMhoub3BlbmNvbmZpZy5VcGRhdGVSZXNwb25z",
            "ZSLeAQoOVXBkYXRlUmVzcG9uc2USEQoJdGltZXN0YW1wGAEgASgDEh4KBHBh",
            "dGgYAiABKAsyEC5vcGVuY29uZmlnLlBhdGgSIgoHbWVzc2FnZRgDIAEoCzIR",
            "Lm9wZW5jb25maWcuRXJyb3ISMAoCb3AYBCABKA4yJC5vcGVuY29uZmlnLlVw",
            "ZGF0ZVJlc3BvbnNlLk9wZXJhdGlvbiJDCglPcGVyYXRpb24SEQoNTk9UX1NQ",
            "RUNJRklFRBAAEgoKBkRFTEVURRABEgsKB1JFUExBQ0UQAhIKCgZVUERBVEUQ",
            "AyJKCgVFcnJvchIMCgRjb2RlGAEgASgNEg8KB21lc3NhZ2UYAiABKAkSIgoE",
            "ZGF0YRgDIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5Bbnki8wEKEFN1YnNjcmli",
            "ZVJlcXVlc3QSMQoJc3Vic2NyaWJlGAEgASgLMhwub3BlbmNvbmZpZy5TdWJz",
            "Y3JpcHRpb25MaXN0SAASKgoJaGVhcnRiZWF0GAIgASgLMhUub3BlbmNvbmZp",
            "Zy5IZWFydGJlYXRIABInCgRwb2xsGAMgASgLMhcub3BlbmNvbmZpZy5Qb2xs",
            "UmVxdWVzdEgAEigKB2FsaWFzZXMYBCABKAsyFS5vcGVuY29uZmlnLkFsaWFz",
            "TGlzdEgAEiIKBXByb3h5GAUgASgLMhMub3BlbmNvbmZpZy5Qcm94aWVzQgkK",
            "B3JlcXVlc3Qi9wEKEFN1YnNjcmlwdGlvbkxpc3QSIAoGcHJlZml4GAEgASgL",
            "MhAub3BlbmNvbmZpZy5QYXRoEi4KDHN1YnNjcmlwdGlvbhgCIAMoCzIYLm9w",
            "ZW5jb25maWcuU3Vic2NyaXB0aW9uEhMKC3VzZV9hbGlhc2VzGAMgASgIEiMK",
            "A3FvcxgEIAEoCzIWLm9wZW5jb25maWcuUU9TTWFya2luZxIvCgRtb2RlGAUg",
            "ASgOMiEub3BlbmNvbmZpZy5TdWJzY3JpcHRpb25MaXN0Lk1vZGUiJgoETW9k",
            "ZRIKCgZTVFJFQU0QABIICgRPTkNFEAESCAoEUE9MTBACIqsBCgxTdWJzY3Jp",
            "cHRpb24SHgoEcGF0aBgBIAEoCzIQLm9wZW5jb25maWcuUGF0aBIqCgRtb2Rl",
            "GAIgASgOMhwub3BlbmNvbmZpZy5TdWJzY3JpcHRpb25Nb2RlEhcKD3NhbXBs",
            "ZV9pbnRlcnZhbBgDIAEoBBIaChJzdXBwcmVzc19yZWR1bmRhbnQYBCABKAgS",
            "GgoSaGVhcnRiZWF0X2ludGVydmFsGAUgASgEIh0KClFPU01hcmtpbmcSDwoH",
            "bWFya2luZxgBIAEoDSItCglBbGlhc0xpc3QSIAoFYWxpYXMYASADKAsyES5v",
            "cGVuY29uZmlnLkFsaWFzIkgKBUFsaWFzEh4KBHBhdGgYASABKAsyEC5vcGVu",
            "Y29uZmlnLlBhdGgSHwoFYWxpYXMYAiABKAsyEC5vcGVuY29uZmlnLlBhdGgi",
            "DQoLUG9sbFJlcXVlc3QiVQoHUHJveGllcxIgCgVwcm94eRgBIAMoCzIRLm9w",
            "ZW5jb25maWcuUHJveHkSEwoLdGFyZ2V0X25hbWUYAiABKAkSEwoLY2xpZW50",
            "X25hbWUYAyABKAkiJgoFUHJveHkSDwoHYWRkcmVzcxgBIAEoCRIMCgRuYW1l",
            "GAIgASgJIpABChFTdWJzY3JpYmVSZXNwb25zZRIqCgZ1cGRhdGUYASABKAsy",
            "GC5vcGVuY29uZmlnLk5vdGlmaWNhdGlvbkgAEioKCWhlYXJ0YmVhdBgCIAEo",
            "CzIVLm9wZW5jb25maWcuSGVhcnRiZWF0SAASFwoNc3luY19yZXNwb25zZRgD",
            "IAEoCEgAQgoKCHJlc3BvbnNlIh0KCUhlYXJ0YmVhdBIQCghpbnRlcnZhbBgB",
            "IAEoBCKPAQoKVURQV3JhcHBlchIcCgJpZBgBIAEoCzIQLm9wZW5jb25maWcu",
            "UGF0aBIaChJ0cmFuc21pdF90aW1lc3RhbXAYAiABKAQSFwoPc2VxdWVuY2Vf",
            "bnVtYmVyGAMgASgEEi4KDG5vdGlmaWNhdGlvbhgEIAMoCzIYLm9wZW5jb25m",
            "aWcuTm90aWZpY2F0aW9uKiYKBFR5cGUSCAoESlNPThAAEgkKBUJZVEVTEAES",
            "CQoFUFJPVE8QAipBChBTdWJzY3JpcHRpb25Nb2RlEhIKDlRBUkdFVF9ERUZJ",
            "TkVEEAASDQoJT05fQ0hBTkdFEAESCgoGU0FNUExFEAIylAIKCk9wZW5Db25m",
            "aWcSNgoDR2V0EhYub3BlbmNvbmZpZy5HZXRSZXF1ZXN0Ghcub3BlbmNvbmZp",
            "Zy5HZXRSZXNwb25zZRJICglHZXRNb2RlbHMSHC5vcGVuY29uZmlnLkdldE1v",
            "ZGVsc1JlcXVlc3QaHS5vcGVuY29uZmlnLkdldE1vZGVsc1Jlc3BvbnNlEjYK",
            "A1NldBIWLm9wZW5jb25maWcuU2V0UmVxdWVzdBoXLm9wZW5jb25maWcuU2V0",
            "UmVzcG9uc2USTAoJU3Vic2NyaWJlEhwub3BlbmNvbmZpZy5TdWJzY3JpYmVS",
            "ZXF1ZXN0Gh0ub3BlbmNvbmZpZy5TdWJzY3JpYmVSZXNwb25zZSgBMAFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Openconfig.Type), typeof(global::Openconfig.SubscriptionMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Notification), global::Openconfig.Notification.Parser, new[]{ "Timestamp", "Prefix", "Alias", "Update", "Delete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Update), global::Openconfig.Update.Parser, new[]{ "Path", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Path), global::Openconfig.Path.Parser, new[]{ "Element" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Value), global::Openconfig.Value.Parser, new[]{ "Value_", "Type", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.GetModelsRequest), global::Openconfig.GetModelsRequest.Parser, new[]{ "RequestType", "Query" }, null, new[]{ typeof(global::Openconfig.GetModelsRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.ModelQuery), global::Openconfig.ModelQuery.Parser, new[]{ "Name", "Namespace", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.GetModelsResponse), global::Openconfig.GetModelsResponse.Parser, new[]{ "Models" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.ModelData), global::Openconfig.ModelData.Parser, new[]{ "Name", "Namespace", "Version", "Data", "ModelType" }, null, new[]{ typeof(global::Openconfig.ModelData.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.GetRequest), global::Openconfig.GetRequest.Parser, new[]{ "Prefix", "Path", "Type", "CacheInterval" }, null, new[]{ typeof(global::Openconfig.GetRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.GetResponse), global::Openconfig.GetResponse.Parser, new[]{ "Notification" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.SetRequest), global::Openconfig.SetRequest.Parser, new[]{ "Prefix", "Delete", "Replace", "Update" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.SetResponse), global::Openconfig.SetResponse.Parser, new[]{ "Prefix", "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.UpdateResponse), global::Openconfig.UpdateResponse.Parser, new[]{ "Timestamp", "Path", "Message", "Op" }, null, new[]{ typeof(global::Openconfig.UpdateResponse.Types.Operation) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Error), global::Openconfig.Error.Parser, new[]{ "Code", "Message", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.SubscribeRequest), global::Openconfig.SubscribeRequest.Parser, new[]{ "Subscribe", "Heartbeat", "Poll", "Aliases", "Proxy" }, new[]{ "Request" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.SubscriptionList), global::Openconfig.SubscriptionList.Parser, new[]{ "Prefix", "Subscription", "UseAliases", "Qos", "Mode" }, null, new[]{ typeof(global::Openconfig.SubscriptionList.Types.Mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Subscription), global::Openconfig.Subscription.Parser, new[]{ "Path", "Mode", "SampleInterval", "SuppressRedundant", "HeartbeatInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.QOSMarking), global::Openconfig.QOSMarking.Parser, new[]{ "Marking" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.AliasList), global::Openconfig.AliasList.Parser, new[]{ "Alias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Alias), global::Openconfig.Alias.Parser, new[]{ "Path", "Alias_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.PollRequest), global::Openconfig.PollRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Proxies), global::Openconfig.Proxies.Parser, new[]{ "Proxy", "TargetName", "ClientName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Proxy), global::Openconfig.Proxy.Parser, new[]{ "Address", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.SubscribeResponse), global::Openconfig.SubscribeResponse.Parser, new[]{ "Update", "Heartbeat", "SyncResponse" }, new[]{ "Response" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.Heartbeat), global::Openconfig.Heartbeat.Parser, new[]{ "Interval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Openconfig.UDPWrapper), global::Openconfig.UDPWrapper.Parser, new[]{ "Id", "TransmitTimestamp", "SequenceNumber", "Notification" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// A Type describes what format a Value's data is encoded in.
  /// </summary>
  public enum Type {
    [pbr::OriginalName("JSON")] Json = 0,
    [pbr::OriginalName("BYTES")] Bytes = 1,
    [pbr::OriginalName("PROTO")] Proto = 2,
  }

  /// <summary>
  /// SubscriptionMode mode informs the target how notifications should be
  /// delivered, as they change or coalesced.  When the mode is TARGET_DEFINED the
  /// target chooses the mode the best suits the value.  When the mode is
  /// ON_CHANGE, the target must send a notification each time the value changes.
  /// When the mode is SAMPLE, the target send notifications at some sampling
  /// interval.
  /// </summary>
  public enum SubscriptionMode {
    /// <summary>
    /// target determines mode
    /// </summary>
    [pbr::OriginalName("TARGET_DEFINED")] TargetDefined = 0,
    /// <summary>
    /// send notification on change (event mode)
    /// </summary>
    [pbr::OriginalName("ON_CHANGE")] OnChange = 1,
    /// <summary>
    /// coalesce values (sampled mode)
    /// </summary>
    [pbr::OriginalName("SAMPLE")] Sample = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A Notification is a list of updates to apply.  Deletes are a list of paths to
  /// delete as long as their data is older than timestamp.  Deleting nodes deletes
  /// all values below the node that are older than timestamp.  Deletes are
  /// performed after updates are applied.  Delete paths are created by
  /// concatenating the prefix, if present, with the individual paths.
  ///
  /// Timestamps are always represented as nanoseconds since UNIX epoch,
  /// Jan 1 1970 00:00:00 UTC. Targets which are incapable of generating nanosecond
  /// resolution are expected to round the timestamp to the highest supported
  /// resolution.
  ///
  /// Update paths are created by concatenating the prefix, if present, with the
  /// paths contained in the Updates.
  ///
  /// It is valid to have a path be in both an update and a delete.  The
  /// deletion will only delete values that are older than this update.
  ///
  /// Each notification should contain at most a single update for a given path.
  /// If a nonconforming implementation does send multiple updates for a given path
  /// in a single notification, all but the final update should be ignored.
  ///
  /// The prefix should normally be the longest common prefix to all the individual
  /// update and delete paths.  This reduces the repetition of the common prefix in
  /// each update and/or delete.  The individual updates and deletes also are a
  /// Path (repeated list of elements), allowing a notification such as:
  ///
  ///   prefix: /a/b/c
  ///   update: {
  ///     path: d
  ///     value: x
  ///   }
  ///   update: {
  ///     path: e/f
  ///     value: y
  ///   }
  ///   update: {
  ///     path: e/g
  ///     value: z
  ///   }
  ///
  /// The prefix may begin with an alias.  An alias is a Path with 1 or more
  /// elements, which maps to another Path.  Aliases may be defined by either the
  /// target or the client.  Target defined aliases are limited to a single
  /// element.  Aliases are client specific (though a target may define the same
  /// alias for multiple clients).
  ///
  /// The target defines an alias by sending a Notification that has alias set and
  /// a non-empty prefix. When alias is set, a Notification need not provide
  /// updates or deletes.  If the alias was previously defined, it is over ridden
  /// with the new definition.  Once defined, the target may send the value of
  /// alias as the first element of a prefix.  A target must not send target
  /// defined aliases to clients that do not specify the use_aliases option in the
  /// initial SubscriptionList message.  A target does not need to define aliases
  /// even if the client does specify the use_aliases option in the initial
  /// SubscriptionLlist message.
  ///
  /// Clients define aliases by sending a SubscriptionRequest with aliases set.
  ///
  /// A target should use a defined alias when possible, but is not required to. A
  /// target may ignore client defined aliases.
  ///
  /// Clients should not define aliases that are valid paths in the data
  /// tree.  The target must not define aliases that are valid paths in the
  /// data tree.
  ///
  /// If a target sends a notification with alias set, but not prefix, then it is
  /// indicating it will no longer use this alias.  The client may delete this
  /// alias from its list of aliases.  A target may not delete an alias defined by
  /// the client.  It is implementation dependent on what happens if the client
  /// defines an alias that is also defined by the target.
  ///
  /// Aliases must not be used in UDP packets.
  ///
  /// If a client sets the use_aliases option, or defines aliases, in the initial
  /// SubscriptionList message, then it must always check the initial elements of a
  /// prefix against the list of known aliases, expanding the prefix as needed.
  /// Aliases must always be defined as fully expanded prefixes.  Only single alias
  /// lookup is needed per Notification.
  ///
  /// Target defined aliases may be any unique string.  A target may choose to use
  /// a unique prefix for aliases to make them visually distinct.  For example, a
  /// target might construct all aliases as an @ character followed by a decimal or
  /// hexadecimal number (perhaps a hashed address in memory).
  ///
  /// Example:
  ///
  /// Define @42 as an alias:
  ///
  ///   timestamp: 1439416376123456789
  ///   prefix: "this_is"
  ///   prefix: "a_long"
  ///   prefix: "prefix"
  ///   alias: "@42
  ///
  /// Use @42 as an alias to set /this_is/a_long/prefix/Ethernet0/0/1/in-octets to
  /// 17:
  ///
  ///   timestamp: 1439416376456456456
  ///   prefix: "@42"
  ///   prefix: "Ethernet0/0/1"
  ///   update: {
  ///     path: {
  ///       element: "in-octets"
  ///     }
  ///     value: 17
  ///   }
  ///
  /// Delete the alias @42:
  ///
  ///   timestamp: 1439416376987654321
  ///   alias: @42
  /// </summary>
  public sealed partial class Notification : pb::IMessage<Notification> {
    private static readonly pb::MessageParser<Notification> _parser = new pb::MessageParser<Notification>(() => new Notification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification(Notification other) : this() {
      timestamp_ = other.timestamp_;
      prefix_ = other.prefix_ != null ? other.prefix_.Clone() : null;
      alias_ = other.alias_;
      update_ = other.update_.Clone();
      delete_ = other.delete_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification Clone() {
      return new Notification(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 2;
    private global::Openconfig.Path prefix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Prefix {
      get { return prefix_; }
      set {
        prefix_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Openconfig.Update> _repeated_update_codec
        = pb::FieldCodec.ForMessage(34, global::Openconfig.Update.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Update> update_ = new pbc::RepeatedField<global::Openconfig.Update>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Update> Update {
      get { return update_; }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Openconfig.Path> _repeated_delete_codec
        = pb::FieldCodec.ForMessage(42, global::Openconfig.Path.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Path> delete_ = new pbc::RepeatedField<global::Openconfig.Path>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Path> Delete {
      get { return delete_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Prefix, other.Prefix)) return false;
      if (Alias != other.Alias) return false;
      if(!update_.Equals(other.update_)) return false;
      if(!delete_.Equals(other.delete_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (prefix_ != null) hash ^= Prefix.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      hash ^= update_.GetHashCode();
      hash ^= delete_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (prefix_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Prefix);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      update_.WriteTo(output, _repeated_update_codec);
      delete_.WriteTo(output, _repeated_delete_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (prefix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefix);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += update_.CalculateSize(_repeated_update_codec);
      size += delete_.CalculateSize(_repeated_delete_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notification other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.prefix_ != null) {
        if (prefix_ == null) {
          prefix_ = new global::Openconfig.Path();
        }
        Prefix.MergeFrom(other.Prefix);
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      update_.Add(other.update_);
      delete_.Add(other.delete_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            if (prefix_ == null) {
              prefix_ = new global::Openconfig.Path();
            }
            input.ReadMessage(prefix_);
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34: {
            update_.AddEntriesFrom(input, _repeated_update_codec);
            break;
          }
          case 42: {
            delete_.AddEntriesFrom(input, _repeated_delete_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An Update maps a path to a value.
  ///
  /// In a Notification, an Update represents a new or updated value for path.  The
  /// absolute path name is the concatenation of the Notification prefix and the
  /// Update path.  Updates are only sent by the target.  Path must always specify
  /// a leaf node.  Value should be a scalar value (e.g., if Value is JSON encoded
  /// then the value 123 is acceptable, but {"x":123} is not).
  ///
  /// In a SetRequest, an Update contains a path to a read-write node and an
  /// optional value.  The absolute path name is the concatenation of the
  /// SetRequest prefix and the Update path The path may reference either a
  /// directory or leaf node.  If value is not present then path, and all its
  /// subelements, should be removed.  If value set and path references a directory
  /// node, the value is the JSON encoded tree of values below that node,
  /// otherwise, if the value is a scalar and may be encoded in JSON are as raw
  /// BYTES.  the value
  ///
  /// For an example of updating a directory node, consider a tree that has the
  /// following values:
  ///
  ///   /a/b/c: 1
  ///   /a/b/d: 2
  ///   /a/b/e: 3
  ///
  /// And an Update of
  ///
  ///   Path: /a/b
  ///   Value: "{c: 4, f: 5}"
  ///
  /// The result is that /a/b/d and /a/b/e are removed, /a/b/c now has the value of
  /// 4, and /a/b/f is added with the value of 5.
  /// </summary>
  public sealed partial class Update : pb::IMessage<Update> {
    private static readonly pb::MessageParser<Update> _parser = new pb::MessageParser<Update>(() => new Update());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update(Update other) : this() {
      path_ = other.path_ != null ? other.path_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update Clone() {
      return new Update(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private global::Openconfig.Path path_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Openconfig.Value value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Path, other.Path)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (path_ != null) hash ^= Path.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (path_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Path);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update other) {
      if (other == null) {
        return;
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::Openconfig.Path();
        }
        Path.MergeFrom(other.Path);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Openconfig.Value();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (path_ == null) {
              path_ = new global::Openconfig.Path();
            }
            input.ReadMessage(path_);
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Openconfig.Value();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Path represents an OpenConfig path as a list of strings, one path element
  /// per string.
  /// </summary>
  public sealed partial class Path : pb::IMessage<Path> {
    private static readonly pb::MessageParser<Path> _parser = new pb::MessageParser<Path>(() => new Path());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Path> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path(Path other) : this() {
      element_ = other.element_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path Clone() {
      return new Path(this);
    }

    /// <summary>Field number for the "element" field.</summary>
    public const int ElementFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_element_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> element_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Element {
      get { return element_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Path);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Path other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!element_.Equals(other.element_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= element_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      element_.WriteTo(output, _repeated_element_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += element_.CalculateSize(_repeated_element_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Path other) {
      if (other == null) {
        return;
      }
      element_.Add(other.element_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            element_.AddEntriesFrom(input, _repeated_element_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Value is either raw data or a JSON encoded value.  An enumerated value is
  /// of type JSON, with the numeric value in the value field and the name of the
  /// enumerated value in the name field.
  /// </summary>
  public sealed partial class Value : pb::IMessage<Value> {
    private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value(Value other) : this() {
      value_ = other.value_;
      type_ = other.type_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value Clone() {
      return new Value(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int Value_FieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value_ {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Openconfig.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value_ != other.Value_) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value_.Length != 0) hash ^= Value_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value_);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value_);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value other) {
      if (other == null) {
        return;
      }
      if (other.Value_.Length != 0) {
        Value_ = other.Value_;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value_ = input.ReadBytes();
            break;
          }
          case 16: {
            type_ = (global::Openconfig.Type) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GetModelsRequest contains a list of models to return.  If no queries are
  /// specified, all currently support models will be returned.  ModelReturnType
  /// specifies the format of the model to return.  By default, only summaries will
  /// be returned.
  /// </summary>
  public sealed partial class GetModelsRequest : pb::IMessage<GetModelsRequest> {
    private static readonly pb::MessageParser<GetModelsRequest> _parser = new pb::MessageParser<GetModelsRequest>(() => new GetModelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetModelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelsRequest(GetModelsRequest other) : this() {
      requestType_ = other.requestType_;
      query_ = other.query_ != null ? other.query_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelsRequest Clone() {
      return new GetModelsRequest(this);
    }

    /// <summary>Field number for the "request_type" field.</summary>
    public const int RequestTypeFieldNumber = 1;
    private global::Openconfig.GetModelsRequest.Types.Type requestType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.GetModelsRequest.Types.Type RequestType {
      get { return requestType_; }
      set {
        requestType_ = value;
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 2;
    private global::Openconfig.ModelQuery query_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.ModelQuery Query {
      get { return query_; }
      set {
        query_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetModelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetModelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestType != other.RequestType) return false;
      if (!object.Equals(Query, other.Query)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestType != 0) hash ^= RequestType.GetHashCode();
      if (query_ != null) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestType);
      }
      if (query_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestType);
      }
      if (query_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetModelsRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestType != 0) {
        RequestType = other.RequestType;
      }
      if (other.query_ != null) {
        if (query_ == null) {
          query_ = new global::Openconfig.ModelQuery();
        }
        Query.MergeFrom(other.Query);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            requestType_ = (global::Openconfig.GetModelsRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (query_ == null) {
              query_ = new global::Openconfig.ModelQuery();
            }
            input.ReadMessage(query_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetModelsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type selects to return only the summary model information or
      /// the full YANG model as bytes.  The caller is responsible for extracting the
      /// YANG model from the bytes.
      /// </summary>
      public enum Type {
        /// <summary>
        /// Request only name, namespace, version information.
        /// </summary>
        [pbr::OriginalName("SUMMARY")] Summary = 0,
        /// <summary>
        /// Request the YANG model as well has summary information.
        /// </summary>
        [pbr::OriginalName("DETAIL")] Detail = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// ModelQuery contains a name and/or namespace regex pattern to match against
  /// supported models on the system.
  /// </summary>
  public sealed partial class ModelQuery : pb::IMessage<ModelQuery> {
    private static readonly pb::MessageParser<ModelQuery> _parser = new pb::MessageParser<ModelQuery>(() => new ModelQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelQuery(ModelQuery other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelQuery Clone() {
      return new ModelQuery(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// re2 pattern match of the model name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// re2 pattern match of the model namespace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    /// re2 pattern match of the model version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelQuery other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GetModelsResponse returns a list of models supported by the system.
  /// </summary>
  public sealed partial class GetModelsResponse : pb::IMessage<GetModelsResponse> {
    private static readonly pb::MessageParser<GetModelsResponse> _parser = new pb::MessageParser<GetModelsResponse>(() => new GetModelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetModelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelsResponse(GetModelsResponse other) : this() {
      models_ = other.models_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelsResponse Clone() {
      return new GetModelsResponse(this);
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Openconfig.ModelData> _repeated_models_codec
        = pb::FieldCodec.ForMessage(10, global::Openconfig.ModelData.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.ModelData> models_ = new pbc::RepeatedField<global::Openconfig.ModelData>();
    /// <summary>
    /// List of models supported by the system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.ModelData> Models {
      get { return models_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetModelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetModelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!models_.Equals(other.models_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= models_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      models_.WriteTo(output, _repeated_models_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += models_.CalculateSize(_repeated_models_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetModelsResponse other) {
      if (other == null) {
        return;
      }
      models_.Add(other.models_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ModelData contains the summary information for the model as well as the
  /// actual model data if requested.
  /// </summary>
  public sealed partial class ModelData : pb::IMessage<ModelData> {
    private static readonly pb::MessageParser<ModelData> _parser = new pb::MessageParser<ModelData>(() => new ModelData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelData(ModelData other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      version_ = other.version_;
      data_ = other.data_;
      modelType_ = other.modelType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelData Clone() {
      return new ModelData(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name of the model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    /// <summary>
    /// namespace of the model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    /// version supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// byte data of the YANG text file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 5;
    private global::Openconfig.ModelData.Types.Type modelType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.ModelData.Types.Type ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      if (Version != other.Version) return false;
      if (Data != other.Data) return false;
      if (ModelType != other.ModelType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (ModelType != 0) hash ^= ModelType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (ModelType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ModelType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (ModelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ModelType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelData other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.ModelType != 0) {
        ModelType = other.ModelType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 40: {
            modelType_ = (global::Openconfig.ModelData.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ModelData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// data describes a YANG module
        /// </summary>
        [pbr::OriginalName("MODULE")] Module = 0,
        /// <summary>
        /// data describes a defined bundle
        /// </summary>
        [pbr::OriginalName("BUNDLE")] Bundle = 1,
        /// <summary>
        /// data describes a YANG module augmentation
        /// </summary>
        [pbr::OriginalName("AUGMENTATION")] Augmentation = 3,
        /// <summary>
        /// data describes a YANG module deviation
        /// </summary>
        [pbr::OriginalName("DEVIATION")] Deviation = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// A GetRequest requests all the values identified by path be returns in a
  /// single GetResponse message.
  ///
  /// If cache_interval is provided and is non-zero number of nanoseconds, it is
  /// a hint of when this get request will be repeated in the future.
  /// </summary>
  public sealed partial class GetRequest : pb::IMessage<GetRequest> {
    private static readonly pb::MessageParser<GetRequest> _parser = new pb::MessageParser<GetRequest>(() => new GetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest(GetRequest other) : this() {
      prefix_ = other.prefix_ != null ? other.prefix_.Clone() : null;
      path_ = other.path_.Clone();
      type_ = other.type_;
      cacheInterval_ = other.cacheInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRequest Clone() {
      return new GetRequest(this);
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 1;
    private global::Openconfig.Path prefix_;
    /// <summary>
    /// If set, each path is relative to prefix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Prefix {
      get { return prefix_; }
      set {
        prefix_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Openconfig.Path> _repeated_path_codec
        = pb::FieldCodec.ForMessage(18, global::Openconfig.Path.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Path> path_ = new pbc::RepeatedField<global::Openconfig.Path>();
    /// <summary>
    /// List of paths to return information for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Path> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Openconfig.GetRequest.Types.Type type_ = 0;
    /// <summary>
    /// Limit what type of values are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.GetRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "cache_interval" field.</summary>
    public const int CacheIntervalFieldNumber = 4;
    private long cacheInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CacheInterval {
      get { return cacheInterval_; }
      set {
        cacheInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prefix, other.Prefix)) return false;
      if(!path_.Equals(other.path_)) return false;
      if (Type != other.Type) return false;
      if (CacheInterval != other.CacheInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prefix_ != null) hash ^= Prefix.GetHashCode();
      hash ^= path_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CacheInterval != 0L) hash ^= CacheInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prefix_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prefix);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (CacheInterval != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CacheInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prefix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefix);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CacheInterval != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CacheInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRequest other) {
      if (other == null) {
        return;
      }
      if (other.prefix_ != null) {
        if (prefix_ == null) {
          prefix_ = new global::Openconfig.Path();
        }
        Prefix.MergeFrom(other.Prefix);
      }
      path_.Add(other.path_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CacheInterval != 0L) {
        CacheInterval = other.CacheInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prefix_ == null) {
              prefix_ = new global::Openconfig.Path();
            }
            input.ReadMessage(prefix_);
            break;
          }
          case 18: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 24: {
            type_ = (global::Openconfig.GetRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 32: {
            CacheInterval = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type defines the mode that Get should use (GET_TYPE in the
      /// RPC specification YANG schema).
      /// </summary>
      public enum Type {
        /// <summary>
        /// Return all data
        /// </summary>
        [pbr::OriginalName("ALL")] All = 0,
        /// <summary>
        /// Only return values in Config containers
        /// </summary>
        [pbr::OriginalName("CONFIG")] Config = 1,
        /// <summary>
        /// Only return values in State containers
        /// </summary>
        [pbr::OriginalName("STATE")] State = 2,
        /// <summary>
        /// Only values in State containers not modeled in Config
        /// </summary>
        [pbr::OriginalName("OPERATIONAL")] Operational = 3,
      }

    }
    #endregion

  }

  public sealed partial class GetResponse : pb::IMessage<GetResponse> {
    private static readonly pb::MessageParser<GetResponse> _parser = new pb::MessageParser<GetResponse>(() => new GetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse(GetResponse other) : this() {
      notification_ = other.notification_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetResponse Clone() {
      return new GetResponse(this);
    }

    /// <summary>Field number for the "notification" field.</summary>
    public const int NotificationFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Openconfig.Notification> _repeated_notification_codec
        = pb::FieldCodec.ForMessage(10, global::Openconfig.Notification.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Notification> notification_ = new pbc::RepeatedField<global::Openconfig.Notification>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Notification> Notification {
      get { return notification_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notification_.Equals(other.notification_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notification_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notification_.WriteTo(output, _repeated_notification_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notification_.CalculateSize(_repeated_notification_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetResponse other) {
      if (other == null) {
        return;
      }
      notification_.Add(other.notification_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            notification_.AddEntriesFrom(input, _repeated_notification_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A SetRequest contains an optional prefix, a list of zero or more Paths to
  /// delete, a list of zero or more paths to replace, and a list of zero of more
  /// paths to update.  Deletes should appear to happen first, followed by
  /// replacements, followed by updates.
  ///
  /// If the path lists a node, rather than leaf, the value is presented in JSON.
  /// When included in replace, it is as if the path was first deleted.  When
  /// included in update, the value augments the existing value, if any.
  ///
  /// The target must either apply all the deletes, replacements, and updates or
  /// return an error.  The deletes, replacements, and updates should appear to be
  /// atomically applied.
  ///
  /// Non-existing but otherwise valid paths are valid for all operations.  Deletes
  /// to a non-existing path are a no-op. Updates and replaces to a non-existing
  /// path will create a path with its values set to values contained in the
  /// Update.  Any unspecified values will be set to system defaults.
  ///
  /// Example:
  /// A SetRequest consisting of a single replace, which has a Path of "/"
  /// and a Value of the full current configuration of a target, in JSON, should
  /// not result in any state changes on the system.
  /// </summary>
  public sealed partial class SetRequest : pb::IMessage<SetRequest> {
    private static readonly pb::MessageParser<SetRequest> _parser = new pb::MessageParser<SetRequest>(() => new SetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRequest(SetRequest other) : this() {
      prefix_ = other.prefix_ != null ? other.prefix_.Clone() : null;
      delete_ = other.delete_.Clone();
      replace_ = other.replace_.Clone();
      update_ = other.update_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRequest Clone() {
      return new SetRequest(this);
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 1;
    private global::Openconfig.Path prefix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Prefix {
      get { return prefix_; }
      set {
        prefix_ = value;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Openconfig.Path> _repeated_delete_codec
        = pb::FieldCodec.ForMessage(18, global::Openconfig.Path.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Path> delete_ = new pbc::RepeatedField<global::Openconfig.Path>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Path> Delete {
      get { return delete_; }
    }

    /// <summary>Field number for the "replace" field.</summary>
    public const int ReplaceFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Openconfig.Update> _repeated_replace_codec
        = pb::FieldCodec.ForMessage(26, global::Openconfig.Update.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Update> replace_ = new pbc::RepeatedField<global::Openconfig.Update>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Update> Replace {
      get { return replace_; }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Openconfig.Update> _repeated_update_codec
        = pb::FieldCodec.ForMessage(34, global::Openconfig.Update.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Update> update_ = new pbc::RepeatedField<global::Openconfig.Update>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Update> Update {
      get { return update_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prefix, other.Prefix)) return false;
      if(!delete_.Equals(other.delete_)) return false;
      if(!replace_.Equals(other.replace_)) return false;
      if(!update_.Equals(other.update_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prefix_ != null) hash ^= Prefix.GetHashCode();
      hash ^= delete_.GetHashCode();
      hash ^= replace_.GetHashCode();
      hash ^= update_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prefix_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prefix);
      }
      delete_.WriteTo(output, _repeated_delete_codec);
      replace_.WriteTo(output, _repeated_replace_codec);
      update_.WriteTo(output, _repeated_update_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prefix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefix);
      }
      size += delete_.CalculateSize(_repeated_delete_codec);
      size += replace_.CalculateSize(_repeated_replace_codec);
      size += update_.CalculateSize(_repeated_update_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetRequest other) {
      if (other == null) {
        return;
      }
      if (other.prefix_ != null) {
        if (prefix_ == null) {
          prefix_ = new global::Openconfig.Path();
        }
        Prefix.MergeFrom(other.Prefix);
      }
      delete_.Add(other.delete_);
      replace_.Add(other.replace_);
      update_.Add(other.update_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prefix_ == null) {
              prefix_ = new global::Openconfig.Path();
            }
            input.ReadMessage(prefix_);
            break;
          }
          case 18: {
            delete_.AddEntriesFrom(input, _repeated_delete_codec);
            break;
          }
          case 26: {
            replace_.AddEntriesFrom(input, _repeated_replace_codec);
            break;
          }
          case 34: {
            update_.AddEntriesFrom(input, _repeated_update_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A SetResponse contains responses to a SetRequest.  The optional prefix is
  /// applied to all paths in response.  Each operation and path in a SetRequest
  /// requires a response.  The target may return additional informational messages
  /// in the response such as path not found for a delete or update.
  /// </summary>
  public sealed partial class SetResponse : pb::IMessage<SetResponse> {
    private static readonly pb::MessageParser<SetResponse> _parser = new pb::MessageParser<SetResponse>(() => new SetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetResponse(SetResponse other) : this() {
      prefix_ = other.prefix_ != null ? other.prefix_.Clone() : null;
      response_ = other.response_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetResponse Clone() {
      return new SetResponse(this);
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 1;
    private global::Openconfig.Path prefix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Prefix {
      get { return prefix_; }
      set {
        prefix_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Openconfig.UpdateResponse> _repeated_response_codec
        = pb::FieldCodec.ForMessage(18, global::Openconfig.UpdateResponse.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.UpdateResponse> response_ = new pbc::RepeatedField<global::Openconfig.UpdateResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.UpdateResponse> Response {
      get { return response_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prefix, other.Prefix)) return false;
      if(!response_.Equals(other.response_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prefix_ != null) hash ^= Prefix.GetHashCode();
      hash ^= response_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prefix_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prefix);
      }
      response_.WriteTo(output, _repeated_response_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prefix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefix);
      }
      size += response_.CalculateSize(_repeated_response_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetResponse other) {
      if (other == null) {
        return;
      }
      if (other.prefix_ != null) {
        if (prefix_ == null) {
          prefix_ = new global::Openconfig.Path();
        }
        Prefix.MergeFrom(other.Prefix);
      }
      response_.Add(other.response_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prefix_ == null) {
              prefix_ = new global::Openconfig.Path();
            }
            input.ReadMessage(prefix_);
            break;
          }
          case 18: {
            response_.AddEntriesFrom(input, _repeated_response_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An UpdateResponse contains the response for a single path Update.
  /// </summary>
  public sealed partial class UpdateResponse : pb::IMessage<UpdateResponse> {
    private static readonly pb::MessageParser<UpdateResponse> _parser = new pb::MessageParser<UpdateResponse>(() => new UpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse(UpdateResponse other) : this() {
      timestamp_ = other.timestamp_;
      path_ = other.path_ != null ? other.path_.Clone() : null;
      message_ = other.message_ != null ? other.message_.Clone() : null;
      op_ = other.op_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse Clone() {
      return new UpdateResponse(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    /// The timestamp is the time, in nanoseconds since the epoch, that a Set was
    /// accepted (i.e., the request was valid).  It does not imply the value was
    /// actually propagated to an underlying datastore.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private global::Openconfig.Path path_;
    /// <summary>
    /// path provided in SetRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private global::Openconfig.Error message_;
    /// <summary>
    /// message contains an informational or an error message.  Required for
    /// unsuccessful SetRequest operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Error Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 4;
    private global::Openconfig.UpdateResponse.Types.Operation op_ = 0;
    /// <summary>
    /// optional operation applied to the path.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.UpdateResponse.Types.Operation Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Path, other.Path)) return false;
      if (!object.Equals(Message, other.Message)) return false;
      if (Op != other.Op) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (path_ != null) hash ^= Path.GetHashCode();
      if (message_ != null) hash ^= Message.GetHashCode();
      if (Op != 0) hash ^= Op.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (path_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Path);
      }
      if (message_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Message);
      }
      if (Op != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Op);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (message_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::Openconfig.Path();
        }
        Path.MergeFrom(other.Path);
      }
      if (other.message_ != null) {
        if (message_ == null) {
          message_ = new global::Openconfig.Error();
        }
        Message.MergeFrom(other.Message);
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            if (path_ == null) {
              path_ = new global::Openconfig.Path();
            }
            input.ReadMessage(path_);
            break;
          }
          case 26: {
            if (message_ == null) {
              message_ = new global::Openconfig.Error();
            }
            input.ReadMessage(message_);
            break;
          }
          case 32: {
            op_ = (global::Openconfig.UpdateResponse.Types.Operation) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UpdateResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Operation {
        [pbr::OriginalName("NOT_SPECIFIED")] NotSpecified = 0,
        [pbr::OriginalName("DELETE")] Delete = 1,
        [pbr::OriginalName("REPLACE")] Replace = 2,
        [pbr::OriginalName("UPDATE")] Update = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// An Error contains information about why a particular request failed.
  /// Examples of informational errors are included in the RPC specification
  /// YANG modules.
  ///
  /// The canonical error codes are defined for each language.
  ///
  ///   Go:   import "google.golang.org/grpc/codes"
  ///   C++:  #include &lt;grpc++/status_code_enum.h>
  ///   Java: import static io.grpc.Status.Code;
  ///   C:    #include &lt;grpc/status.h>
  ///   C#:   using Grpc.Core;
  /// </summary>
  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      code_ = other.code_;
      message_ = other.message_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private uint code_;
    /// <summary>
    /// Canonical gRPC error code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// Human readable error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Any data_;
    /// <summary>
    /// optional additional information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadUInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A SubscribeRequest is either a subscription request, a change to the
  /// heartbeat rate, initiating a poll, or defining an alias. It is always sent
  /// from the client to the target.
  /// </summary>
  public sealed partial class SubscribeRequest : pb::IMessage<SubscribeRequest> {
    private static readonly pb::MessageParser<SubscribeRequest> _parser = new pb::MessageParser<SubscribeRequest>(() => new SubscribeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest(SubscribeRequest other) : this() {
      proxy_ = other.proxy_ != null ? other.proxy_.Clone() : null;
      switch (other.RequestCase) {
        case RequestOneofCase.Subscribe:
          Subscribe = other.Subscribe.Clone();
          break;
        case RequestOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case RequestOneofCase.Poll:
          Poll = other.Poll.Clone();
          break;
        case RequestOneofCase.Aliases:
          Aliases = other.Aliases.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeRequest Clone() {
      return new SubscribeRequest(this);
    }

    /// <summary>Field number for the "subscribe" field.</summary>
    public const int SubscribeFieldNumber = 1;
    /// <summary>
    /// See description for SubscriptionList
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.SubscriptionList Subscribe {
      get { return requestCase_ == RequestOneofCase.Subscribe ? (global::Openconfig.SubscriptionList) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Subscribe;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 2;
    /// <summary>
    /// See description for Heartbeat
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Heartbeat Heartbeat {
      get { return requestCase_ == RequestOneofCase.Heartbeat ? (global::Openconfig.Heartbeat) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "poll" field.</summary>
    public const int PollFieldNumber = 3;
    /// <summary>
    /// See description for PollRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.PollRequest Poll {
      get { return requestCase_ == RequestOneofCase.Poll ? (global::Openconfig.PollRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Poll;
      }
    }

    /// <summary>Field number for the "aliases" field.</summary>
    public const int AliasesFieldNumber = 4;
    /// <summary>
    /// See description for AliasList
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.AliasList Aliases {
      get { return requestCase_ == RequestOneofCase.Aliases ? (global::Openconfig.AliasList) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Aliases;
      }
    }

    /// <summary>Field number for the "proxy" field.</summary>
    public const int ProxyFieldNumber = 5;
    private global::Openconfig.Proxies proxy_;
    /// <summary>
    /// See description in Proxies
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Proxies Proxy {
      get { return proxy_; }
      set {
        proxy_ = value;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      Subscribe = 1,
      Heartbeat = 2,
      Poll = 3,
      Aliases = 4,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Subscribe, other.Subscribe)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(Poll, other.Poll)) return false;
      if (!object.Equals(Aliases, other.Aliases)) return false;
      if (!object.Equals(Proxy, other.Proxy)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.Subscribe) hash ^= Subscribe.GetHashCode();
      if (requestCase_ == RequestOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (requestCase_ == RequestOneofCase.Poll) hash ^= Poll.GetHashCode();
      if (requestCase_ == RequestOneofCase.Aliases) hash ^= Aliases.GetHashCode();
      if (proxy_ != null) hash ^= Proxy.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestCase_ == RequestOneofCase.Subscribe) {
        output.WriteRawTag(10);
        output.WriteMessage(Subscribe);
      }
      if (requestCase_ == RequestOneofCase.Heartbeat) {
        output.WriteRawTag(18);
        output.WriteMessage(Heartbeat);
      }
      if (requestCase_ == RequestOneofCase.Poll) {
        output.WriteRawTag(26);
        output.WriteMessage(Poll);
      }
      if (requestCase_ == RequestOneofCase.Aliases) {
        output.WriteRawTag(34);
        output.WriteMessage(Aliases);
      }
      if (proxy_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Proxy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.Subscribe) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Subscribe);
      }
      if (requestCase_ == RequestOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (requestCase_ == RequestOneofCase.Poll) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Poll);
      }
      if (requestCase_ == RequestOneofCase.Aliases) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Aliases);
      }
      if (proxy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proxy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeRequest other) {
      if (other == null) {
        return;
      }
      if (other.proxy_ != null) {
        if (proxy_ == null) {
          proxy_ = new global::Openconfig.Proxies();
        }
        Proxy.MergeFrom(other.Proxy);
      }
      switch (other.RequestCase) {
        case RequestOneofCase.Subscribe:
          if (Subscribe == null) {
            Subscribe = new global::Openconfig.SubscriptionList();
          }
          Subscribe.MergeFrom(other.Subscribe);
          break;
        case RequestOneofCase.Heartbeat:
          if (Heartbeat == null) {
            Heartbeat = new global::Openconfig.Heartbeat();
          }
          Heartbeat.MergeFrom(other.Heartbeat);
          break;
        case RequestOneofCase.Poll:
          if (Poll == null) {
            Poll = new global::Openconfig.PollRequest();
          }
          Poll.MergeFrom(other.Poll);
          break;
        case RequestOneofCase.Aliases:
          if (Aliases == null) {
            Aliases = new global::Openconfig.AliasList();
          }
          Aliases.MergeFrom(other.Aliases);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Openconfig.SubscriptionList subBuilder = new global::Openconfig.SubscriptionList();
            if (requestCase_ == RequestOneofCase.Subscribe) {
              subBuilder.MergeFrom(Subscribe);
            }
            input.ReadMessage(subBuilder);
            Subscribe = subBuilder;
            break;
          }
          case 18: {
            global::Openconfig.Heartbeat subBuilder = new global::Openconfig.Heartbeat();
            if (requestCase_ == RequestOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 26: {
            global::Openconfig.PollRequest subBuilder = new global::Openconfig.PollRequest();
            if (requestCase_ == RequestOneofCase.Poll) {
              subBuilder.MergeFrom(Poll);
            }
            input.ReadMessage(subBuilder);
            Poll = subBuilder;
            break;
          }
          case 34: {
            global::Openconfig.AliasList subBuilder = new global::Openconfig.AliasList();
            if (requestCase_ == RequestOneofCase.Aliases) {
              subBuilder.MergeFrom(Aliases);
            }
            input.ReadMessage(subBuilder);
            Aliases = subBuilder;
            break;
          }
          case 42: {
            if (proxy_ == null) {
              proxy_ = new global::Openconfig.Proxies();
            }
            input.ReadMessage(proxy_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SubscriptionList contains the list of individual subscriptions.  A
  /// SubscriptionList is only valid if all of the contained subscriptions are
  /// valid.
  ///
  /// A SubscriptionList operates in one of three modes, all of which operate on
  /// the streaming channel.
  ///
  /// STREAM:  This is the default mode.  The target must send notifications for
  /// all subscribed values.  After each subscribed value as been sent at least
  /// once, the target must send a sync_response.  The target continues to send
  /// update notifications for the subscribed values as indicated in the
  /// subscription.
  ///
  /// ONCE: This mode is used to send a one-time request for data to the target
  /// by setting once to true in the SubscriptionRequest.  The target sends each
  /// subscribed value once, followed by a sync_response (indicating all values
  /// were sent) and then closes the stream.
  ///
  /// POLL: This mode provides a method to send periodic requests over a single
  /// stream similar to conventional polling.  In this mode, the client is able to
  /// control when data is sent by the target, in contrast to the STREAM mode.
  /// With a single declared subscription, the target need only parse the
  /// subscription once, and can expect periodic requests for the corresponding
  /// data.
  ///
  /// After sending a SubscriptionList with mode set to POLL, polls are initiated
  /// by sending a PollRequest.  The target sends no notifications to the client
  /// until the first PollRequest is received.  The target responds by sending each
  /// subscribed value once, followed by a sync_response.  This process repeats
  /// for subsequent polls.
  ///
  /// Polling mode is optional.  If a target does not support the polling mode, it
  /// must reject a polling subscription request.  If a client sends a new poll
  /// before the previous poll completes, the target should close the stream with
  /// an error.
  ///
  /// If prefix is set then all subscriptions in the list and all notifications
  /// generated are relative to prefix.
  ///
  /// If qos is provided then marking is the QOS marking to use for this session.
  /// The target should use this QOS marking, if supported.
  ///
  /// In the event of overlapping subscription, the most specific subscription for
  /// a value is used.  For example, if the following two subscriptions were made:
  ///
  ///  /interfaces/interfaces//state
  ///  /interfaces/interfaces//state/counters
  ///
  /// Then values in state outside of counters would be subject to the first
  /// subscription.  Values inside of counters would be subject to the second
  /// subscription.
  /// </summary>
  public sealed partial class SubscriptionList : pb::IMessage<SubscriptionList> {
    private static readonly pb::MessageParser<SubscriptionList> _parser = new pb::MessageParser<SubscriptionList>(() => new SubscriptionList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionList(SubscriptionList other) : this() {
      prefix_ = other.prefix_ != null ? other.prefix_.Clone() : null;
      subscription_ = other.subscription_.Clone();
      useAliases_ = other.useAliases_;
      qos_ = other.qos_ != null ? other.qos_.Clone() : null;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionList Clone() {
      return new SubscriptionList(this);
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 1;
    private global::Openconfig.Path prefix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Prefix {
      get { return prefix_; }
      set {
        prefix_ = value;
      }
    }

    /// <summary>Field number for the "subscription" field.</summary>
    public const int SubscriptionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Openconfig.Subscription> _repeated_subscription_codec
        = pb::FieldCodec.ForMessage(18, global::Openconfig.Subscription.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Subscription> subscription_ = new pbc::RepeatedField<global::Openconfig.Subscription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Subscription> Subscription {
      get { return subscription_; }
    }

    /// <summary>Field number for the "use_aliases" field.</summary>
    public const int UseAliasesFieldNumber = 3;
    private bool useAliases_;
    /// <summary>
    /// client accepts target defined aliases
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseAliases {
      get { return useAliases_; }
      set {
        useAliases_ = value;
      }
    }

    /// <summary>Field number for the "qos" field.</summary>
    public const int QosFieldNumber = 4;
    private global::Openconfig.QOSMarking qos_;
    /// <summary>
    /// QOS marking level target should use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.QOSMarking Qos {
      get { return qos_; }
      set {
        qos_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 5;
    private global::Openconfig.SubscriptionList.Types.Mode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.SubscriptionList.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prefix, other.Prefix)) return false;
      if(!subscription_.Equals(other.subscription_)) return false;
      if (UseAliases != other.UseAliases) return false;
      if (!object.Equals(Qos, other.Qos)) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prefix_ != null) hash ^= Prefix.GetHashCode();
      hash ^= subscription_.GetHashCode();
      if (UseAliases != false) hash ^= UseAliases.GetHashCode();
      if (qos_ != null) hash ^= Qos.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prefix_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prefix);
      }
      subscription_.WriteTo(output, _repeated_subscription_codec);
      if (UseAliases != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseAliases);
      }
      if (qos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Qos);
      }
      if (Mode != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prefix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefix);
      }
      size += subscription_.CalculateSize(_repeated_subscription_codec);
      if (UseAliases != false) {
        size += 1 + 1;
      }
      if (qos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Qos);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionList other) {
      if (other == null) {
        return;
      }
      if (other.prefix_ != null) {
        if (prefix_ == null) {
          prefix_ = new global::Openconfig.Path();
        }
        Prefix.MergeFrom(other.Prefix);
      }
      subscription_.Add(other.subscription_);
      if (other.UseAliases != false) {
        UseAliases = other.UseAliases;
      }
      if (other.qos_ != null) {
        if (qos_ == null) {
          qos_ = new global::Openconfig.QOSMarking();
        }
        Qos.MergeFrom(other.Qos);
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prefix_ == null) {
              prefix_ = new global::Openconfig.Path();
            }
            input.ReadMessage(prefix_);
            break;
          }
          case 18: {
            subscription_.AddEntriesFrom(input, _repeated_subscription_codec);
            break;
          }
          case 24: {
            UseAliases = input.ReadBool();
            break;
          }
          case 34: {
            if (qos_ == null) {
              qos_ = new global::Openconfig.QOSMarking();
            }
            input.ReadMessage(qos_);
            break;
          }
          case 40: {
            mode_ = (global::Openconfig.SubscriptionList.Types.Mode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SubscriptionList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        [pbr::OriginalName("STREAM")] Stream = 0,
        [pbr::OriginalName("ONCE")] Once = 1,
        [pbr::OriginalName("POLL")] Poll = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Subscription contains a path as well as information on how two send
  /// notifications.
  ///
  /// A Subscription contains subscription information for a single path.  The path
  /// may be either a leaf node or a directory node in the tree.  When subscribing
  /// for a directory node, all nodes below it are automatically included in the
  /// subscription.
  ///
  /// If mode is ON_CHANGE, then the target must either be able to send
  /// notifications each time a value changes or reject the subscription.  This is
  /// typically used for events.  The sample_interval is ignored when the mode in
  /// ON_CHANGE.
  ///
  /// If mode is SAMPLE, the target must coalesce notifications based on the
  /// provided sample_interval.  This is typically used for aggregating values
  /// (i.e., counters).  The sample_interval, if not 0, is the number of
  /// nanoseconds between updates.  If 0, the interval is selected by the target.
  /// If the target cannot support the supplied sample_interval, the Subscription
  /// must be rejected.  The sample_interval is only used for subscriptions in
  /// streaming mode.  The sample_interval is ignored if mode is not SAMPLE.
  ///
  /// (Setting mode to SAMPLE and sample_interval to 0 is functionally the
  /// same as setting mode to TARGET_DEFINED.)
  ///
  /// The suppress_redundant field, if true, indicates the target should not send
  /// notifications for fields that are unchanged since.  This value is ignored
  /// if mode is not SAMPLE.
  ///
  /// The heartbeat_interval field specifies how frequently an unchanged value must
  /// be sent regardless of the suppress_redundant field.  A value of 0 indicates
  /// there is no heartbeat_interval and values only need to be sent when changed.
  /// The target must reject a subscription if it cannot support the requested
  /// heartbeat_interval.  This value is ignored if mode is not SAMPLE.
  /// </summary>
  public sealed partial class Subscription : pb::IMessage<Subscription> {
    private static readonly pb::MessageParser<Subscription> _parser = new pb::MessageParser<Subscription>(() => new Subscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Subscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription(Subscription other) : this() {
      path_ = other.path_ != null ? other.path_.Clone() : null;
      mode_ = other.mode_;
      sampleInterval_ = other.sampleInterval_;
      suppressRedundant_ = other.suppressRedundant_;
      heartbeatInterval_ = other.heartbeatInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription Clone() {
      return new Subscription(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private global::Openconfig.Path path_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private global::Openconfig.SubscriptionMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.SubscriptionMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "sample_interval" field.</summary>
    public const int SampleIntervalFieldNumber = 3;
    private ulong sampleInterval_;
    /// <summary>
    /// nanoseconds between updates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SampleInterval {
      get { return sampleInterval_; }
      set {
        sampleInterval_ = value;
      }
    }

    /// <summary>Field number for the "suppress_redundant" field.</summary>
    public const int SuppressRedundantFieldNumber = 4;
    private bool suppressRedundant_;
    /// <summary>
    /// do not send updates for unchanged values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SuppressRedundant {
      get { return suppressRedundant_; }
      set {
        suppressRedundant_ = value;
      }
    }

    /// <summary>Field number for the "heartbeat_interval" field.</summary>
    public const int HeartbeatIntervalFieldNumber = 5;
    private ulong heartbeatInterval_;
    /// <summary>
    /// maximum silent period in nanoseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeartbeatInterval {
      get { return heartbeatInterval_; }
      set {
        heartbeatInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Subscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Subscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Path, other.Path)) return false;
      if (Mode != other.Mode) return false;
      if (SampleInterval != other.SampleInterval) return false;
      if (SuppressRedundant != other.SuppressRedundant) return false;
      if (HeartbeatInterval != other.HeartbeatInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (path_ != null) hash ^= Path.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (SampleInterval != 0UL) hash ^= SampleInterval.GetHashCode();
      if (SuppressRedundant != false) hash ^= SuppressRedundant.GetHashCode();
      if (HeartbeatInterval != 0UL) hash ^= HeartbeatInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (path_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Path);
      }
      if (Mode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Mode);
      }
      if (SampleInterval != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SampleInterval);
      }
      if (SuppressRedundant != false) {
        output.WriteRawTag(32);
        output.WriteBool(SuppressRedundant);
      }
      if (HeartbeatInterval != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(HeartbeatInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (SampleInterval != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SampleInterval);
      }
      if (SuppressRedundant != false) {
        size += 1 + 1;
      }
      if (HeartbeatInterval != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeartbeatInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Subscription other) {
      if (other == null) {
        return;
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::Openconfig.Path();
        }
        Path.MergeFrom(other.Path);
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.SampleInterval != 0UL) {
        SampleInterval = other.SampleInterval;
      }
      if (other.SuppressRedundant != false) {
        SuppressRedundant = other.SuppressRedundant;
      }
      if (other.HeartbeatInterval != 0UL) {
        HeartbeatInterval = other.HeartbeatInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (path_ == null) {
              path_ = new global::Openconfig.Path();
            }
            input.ReadMessage(path_);
            break;
          }
          case 16: {
            mode_ = (global::Openconfig.SubscriptionMode) input.ReadEnum();
            break;
          }
          case 24: {
            SampleInterval = input.ReadUInt64();
            break;
          }
          case 32: {
            SuppressRedundant = input.ReadBool();
            break;
          }
          case 40: {
            HeartbeatInterval = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A QOSMarking describes the QOS marking to use, if supported by the target.
  /// </summary>
  public sealed partial class QOSMarking : pb::IMessage<QOSMarking> {
    private static readonly pb::MessageParser<QOSMarking> _parser = new pb::MessageParser<QOSMarking>(() => new QOSMarking());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QOSMarking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QOSMarking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QOSMarking(QOSMarking other) : this() {
      marking_ = other.marking_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QOSMarking Clone() {
      return new QOSMarking(this);
    }

    /// <summary>Field number for the "marking" field.</summary>
    public const int MarkingFieldNumber = 1;
    private uint marking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Marking {
      get { return marking_; }
      set {
        marking_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QOSMarking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QOSMarking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Marking != other.Marking) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Marking != 0) hash ^= Marking.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Marking != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Marking);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Marking != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Marking);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QOSMarking other) {
      if (other == null) {
        return;
      }
      if (other.Marking != 0) {
        Marking = other.Marking;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Marking = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An AliasList represents a list of aliases.
  /// </summary>
  public sealed partial class AliasList : pb::IMessage<AliasList> {
    private static readonly pb::MessageParser<AliasList> _parser = new pb::MessageParser<AliasList>(() => new AliasList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AliasList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliasList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliasList(AliasList other) : this() {
      alias_ = other.alias_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliasList Clone() {
      return new AliasList(this);
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Openconfig.Alias> _repeated_alias_codec
        = pb::FieldCodec.ForMessage(10, global::Openconfig.Alias.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Alias> alias_ = new pbc::RepeatedField<global::Openconfig.Alias>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Alias> Alias {
      get { return alias_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AliasList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AliasList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!alias_.Equals(other.alias_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= alias_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      alias_.WriteTo(output, _repeated_alias_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += alias_.CalculateSize(_repeated_alias_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AliasList other) {
      if (other == null) {
        return;
      }
      alias_.Add(other.alias_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            alias_.AddEntriesFrom(input, _repeated_alias_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An Alias specifies a preferred client defined alias for a specified path.  An
  /// Alias is only sent from the client to the target.  An alias is typically one
  /// element and is much shorter than the provided path.  A target should
  /// substitute alias for path in Notifications.  Targets may ignore Alias
  /// messages.
  ///
  /// The path must be fully expanded and not use an alias.
  ///
  /// If alias is set and path is not then the alias must no longer be used by the
  /// target, once received.  A client may still see Notifications using the alias
  /// that were generated prior to the target receiving the request to stop using
  /// the alias.
  /// </summary>
  public sealed partial class Alias : pb::IMessage<Alias> {
    private static readonly pb::MessageParser<Alias> _parser = new pb::MessageParser<Alias>(() => new Alias());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alias> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alias() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alias(Alias other) : this() {
      path_ = other.path_ != null ? other.path_.Clone() : null;
      alias_ = other.alias_ != null ? other.alias_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alias Clone() {
      return new Alias(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private global::Openconfig.Path path_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int Alias_FieldNumber = 2;
    private global::Openconfig.Path alias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Alias_ {
      get { return alias_; }
      set {
        alias_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alias);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alias other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Path, other.Path)) return false;
      if (!object.Equals(Alias_, other.Alias_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (path_ != null) hash ^= Path.GetHashCode();
      if (alias_ != null) hash ^= Alias_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (path_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Path);
      }
      if (alias_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Alias_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (alias_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alias_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alias other) {
      if (other == null) {
        return;
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::Openconfig.Path();
        }
        Path.MergeFrom(other.Path);
      }
      if (other.alias_ != null) {
        if (alias_ == null) {
          alias_ = new global::Openconfig.Path();
        }
        Alias_.MergeFrom(other.Alias_);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (path_ == null) {
              path_ = new global::Openconfig.Path();
            }
            input.ReadMessage(path_);
            break;
          }
          case 18: {
            if (alias_ == null) {
              alias_ = new global::Openconfig.Path();
            }
            input.ReadMessage(alias_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A PollRequest requests that all values in the subscription be resent.
  /// </summary>
  public sealed partial class PollRequest : pb::IMessage<PollRequest> {
    private static readonly pb::MessageParser<PollRequest> _parser = new pb::MessageParser<PollRequest>(() => new PollRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PollRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollRequest(PollRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollRequest Clone() {
      return new PollRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PollRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PollRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PollRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Proxies is a list of proxies to use to get to the target.  The first proxy
  /// listed is the the next hop.  Actual targets ignore the proxy field (it should
  /// not be set when the request reaches the target).
  ///
  /// The target_name is an optional informational field describing the ultimate
  /// destination of the subscribe request.  Proxies may find it useful to use this
  /// information in logs and errors.
  ///
  /// The client_name is an optional informational field describing the client
  /// making the subscribe request.  Proxies may find it useful to use this
  /// information in logs and errors.
  /// </summary>
  public sealed partial class Proxies : pb::IMessage<Proxies> {
    private static readonly pb::MessageParser<Proxies> _parser = new pb::MessageParser<Proxies>(() => new Proxies());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Proxies> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proxies() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proxies(Proxies other) : this() {
      proxy_ = other.proxy_.Clone();
      targetName_ = other.targetName_;
      clientName_ = other.clientName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proxies Clone() {
      return new Proxies(this);
    }

    /// <summary>Field number for the "proxy" field.</summary>
    public const int ProxyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Openconfig.Proxy> _repeated_proxy_codec
        = pb::FieldCodec.ForMessage(10, global::Openconfig.Proxy.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Proxy> proxy_ = new pbc::RepeatedField<global::Openconfig.Proxy>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Proxy> Proxy {
      get { return proxy_; }
    }

    /// <summary>Field number for the "target_name" field.</summary>
    public const int TargetNameFieldNumber = 2;
    private string targetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetName {
      get { return targetName_; }
      set {
        targetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_name" field.</summary>
    public const int ClientNameFieldNumber = 3;
    private string clientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientName {
      get { return clientName_; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Proxies);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Proxies other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!proxy_.Equals(other.proxy_)) return false;
      if (TargetName != other.TargetName) return false;
      if (ClientName != other.ClientName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= proxy_.GetHashCode();
      if (TargetName.Length != 0) hash ^= TargetName.GetHashCode();
      if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      proxy_.WriteTo(output, _repeated_proxy_codec);
      if (TargetName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetName);
      }
      if (ClientName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += proxy_.CalculateSize(_repeated_proxy_codec);
      if (TargetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetName);
      }
      if (ClientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Proxies other) {
      if (other == null) {
        return;
      }
      proxy_.Add(other.proxy_);
      if (other.TargetName.Length != 0) {
        TargetName = other.TargetName;
      }
      if (other.ClientName.Length != 0) {
        ClientName = other.ClientName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            proxy_.AddEntriesFrom(input, _repeated_proxy_codec);
            break;
          }
          case 18: {
            TargetName = input.ReadString();
            break;
          }
          case 26: {
            ClientName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Proxy represents a proxy service to use when connecting to the target.
  /// </summary>
  public sealed partial class Proxy : pb::IMessage<Proxy> {
    private static readonly pb::MessageParser<Proxy> _parser = new pb::MessageParser<Proxy>(() => new Proxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Proxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proxy(Proxy other) : this() {
      address_ = other.address_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proxy Clone() {
      return new Proxy(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    /// IP address of the proxy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// optional informational name for the proxy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Proxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Proxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Proxy other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A SubscribeResponse is always sent from the target to the client.
  ///
  /// Notifications are sent as described above in SubscribeList.
  ///
  /// A sync_response is sent when the target finishes sending all the subscribed
  /// values at least once. sync_response must be set to true for the client to
  /// consider the stream synced.
  /// </summary>
  public sealed partial class SubscribeResponse : pb::IMessage<SubscribeResponse> {
    private static readonly pb::MessageParser<SubscribeResponse> _parser = new pb::MessageParser<SubscribeResponse>(() => new SubscribeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeResponse(SubscribeResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case ResponseOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case ResponseOneofCase.SyncResponse:
          SyncResponse = other.SyncResponse;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeResponse Clone() {
      return new SubscribeResponse(this);
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Notification Update {
      get { return responseCase_ == ResponseOneofCase.Update ? (global::Openconfig.Notification) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Update;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 2;
    /// <summary>
    /// See description for Heartbeat
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Heartbeat Heartbeat {
      get { return responseCase_ == ResponseOneofCase.Heartbeat ? (global::Openconfig.Heartbeat) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "sync_response" field.</summary>
    public const int SyncResponseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncResponse {
      get { return responseCase_ == ResponseOneofCase.SyncResponse ? (bool) response_ : false; }
      set {
        response_ = value;
        responseCase_ = ResponseOneofCase.SyncResponse;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Update = 1,
      Heartbeat = 2,
      SyncResponse = 3,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (SyncResponse != other.SyncResponse) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Update) hash ^= Update.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (responseCase_ == ResponseOneofCase.SyncResponse) hash ^= SyncResponse.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Update) {
        output.WriteRawTag(10);
        output.WriteMessage(Update);
      }
      if (responseCase_ == ResponseOneofCase.Heartbeat) {
        output.WriteRawTag(18);
        output.WriteMessage(Heartbeat);
      }
      if (responseCase_ == ResponseOneofCase.SyncResponse) {
        output.WriteRawTag(24);
        output.WriteBool(SyncResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Update) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (responseCase_ == ResponseOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (responseCase_ == ResponseOneofCase.SyncResponse) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Update:
          if (Update == null) {
            Update = new global::Openconfig.Notification();
          }
          Update.MergeFrom(other.Update);
          break;
        case ResponseOneofCase.Heartbeat:
          if (Heartbeat == null) {
            Heartbeat = new global::Openconfig.Heartbeat();
          }
          Heartbeat.MergeFrom(other.Heartbeat);
          break;
        case ResponseOneofCase.SyncResponse:
          SyncResponse = other.SyncResponse;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Openconfig.Notification subBuilder = new global::Openconfig.Notification();
            if (responseCase_ == ResponseOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 18: {
            global::Openconfig.Heartbeat subBuilder = new global::Openconfig.Heartbeat();
            if (responseCase_ == ResponseOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 24: {
            SyncResponse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Heartbeat requests a (possibly repeated) response from the remote side.
  /// </summary>
  public sealed partial class Heartbeat : pb::IMessage<Heartbeat> {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
      interval_ = other.interval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private ulong interval_;
    /// <summary>
    /// interval is the maximum amount of time, in nanoseconds, between subsequent
    /// messages from the remote side.  An empty message may be sent if no other
    /// messages are pending.  If interval is 0 then the remote must immediately
    /// respond with a (possibly empty) message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interval != other.Interval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interval != 0UL) hash ^= Interval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interval != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interval != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Interval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      if (other.Interval != 0UL) {
        Interval = other.Interval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Interval = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// UDPWrapper adds metadata necessary for encapsulating a list of notifications
  /// into a UDP packet.  It adds the ability to identify the target that
  /// originated the Notifications, detect packet loss, and identify latency
  /// introduced by the target wrapping notifications.
  ///
  /// The target should keep the total size of a serialized UDPWrapper message
  /// small enough to not cause IP packet fragmentation.
  /// </summary>
  public sealed partial class UDPWrapper : pb::IMessage<UDPWrapper> {
    private static readonly pb::MessageParser<UDPWrapper> _parser = new pb::MessageParser<UDPWrapper>(() => new UDPWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UDPWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Openconfig.OpenconfigReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPWrapper(UDPWrapper other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      transmitTimestamp_ = other.transmitTimestamp_;
      sequenceNumber_ = other.sequenceNumber_;
      notification_ = other.notification_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPWrapper Clone() {
      return new UDPWrapper(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Openconfig.Path id_;
    /// <summary>
    /// ID Identifies the target (e.g., Loopback IP address, linecard, ...)
    /// TODO(borman): Add examples.  Perhaps agent/module/submodule for vendor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Openconfig.Path Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "transmit_timestamp" field.</summary>
    public const int TransmitTimestampFieldNumber = 2;
    private ulong transmitTimestamp_;
    /// <summary>
    /// Optional Epoch time of when the message is queued for transmit.
    /// Useful to quantify delay between message generation and transmission.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransmitTimestamp {
      get { return transmitTimestamp_; }
      set {
        transmitTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "sequence_number" field.</summary>
    public const int SequenceNumberFieldNumber = 3;
    private ulong sequenceNumber_;
    /// <summary>
    /// The sequence_number must start at 1 and increment by 1 for each new packet
    /// sent.  A client may use this to determine if a packet was lost.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "notification" field.</summary>
    public const int NotificationFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Openconfig.Notification> _repeated_notification_codec
        = pb::FieldCodec.ForMessage(34, global::Openconfig.Notification.Parser);
    private readonly pbc::RepeatedField<global::Openconfig.Notification> notification_ = new pbc::RepeatedField<global::Openconfig.Notification>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Openconfig.Notification> Notification {
      get { return notification_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UDPWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UDPWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (TransmitTimestamp != other.TransmitTimestamp) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if(!notification_.Equals(other.notification_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (TransmitTimestamp != 0UL) hash ^= TransmitTimestamp.GetHashCode();
      if (SequenceNumber != 0UL) hash ^= SequenceNumber.GetHashCode();
      hash ^= notification_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (TransmitTimestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TransmitTimestamp);
      }
      if (SequenceNumber != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SequenceNumber);
      }
      notification_.WriteTo(output, _repeated_notification_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (TransmitTimestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransmitTimestamp);
      }
      if (SequenceNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceNumber);
      }
      size += notification_.CalculateSize(_repeated_notification_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UDPWrapper other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::Openconfig.Path();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.TransmitTimestamp != 0UL) {
        TransmitTimestamp = other.TransmitTimestamp;
      }
      if (other.SequenceNumber != 0UL) {
        SequenceNumber = other.SequenceNumber;
      }
      notification_.Add(other.notification_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::Openconfig.Path();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            TransmitTimestamp = input.ReadUInt64();
            break;
          }
          case 24: {
            SequenceNumber = input.ReadUInt64();
            break;
          }
          case 34: {
            notification_.AddEntriesFrom(input, _repeated_notification_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
